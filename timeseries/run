#!/bin/bash

if [ $# -lt 0 ]; then
	echo "usage: $0 data"	
	exit
fi

# Apple (NASDAQ:APPL), Google (NASDAQ:GOOG), Microsoft (NASDAQ:MSFT),
#Facebook (NASDAQ:FB), Twitter (NYSE:TWTR), LinkedIn
#(NYSE:LNKD), Amazon (NASDAQ:AMZN), Oracle (NYSE:ORCL), IBM (NYSE:IBM), Intel (NASDAQ:INT)
#symbols=( AAPL GOOG MSFT AMZN LNKD FB )
#symbols=( MSFT AMZN LNKD FB )
symbols=( FB )
#symbol=$1
#symbol=AAPL # since 1980-12-12
#symbol=GOOG # yahoo not working, google contains missing values NA
symbol=FB # since 2012-05-18
#symbol=MSFT # since 1986-3-13
#symbol=TWTR # too small data
#symbol=LNKD # since 2011-5-19
#symbol=AMZN # since 1997-5-16
#symbol=IBM # 

# training period
#startdate=2010-09-07
startdate=1900-01-01
#startdate=2000-01-01
enddate=2013-04-01

# test period
teststart=2013-04-02
testend=2014-04-01

xlabel="DATE"
#xlabel="DAY"
ylabel="STOCK VALUE ($)"
#ylabel="CLOSE VALUE"

#script=

#function genplot() {
function config() {
	name=$symbol
	out=$symbol # Gaussian mixture
	#out=$symbol-single 

	#name=$prefix
	script=${out}.R
	png=${out}.png
	emf=${out}.emf
	eps=${out}.eps

	src=yahoo
	#if [ $symbol == "GOOG"]; then # or $symbol == "TWTR" ]
	#	src=google
	#fi

	cmd="png('$png')"

	if [ $1 == "png" ]; then
		figure=$png
		cmd="png('$figure')"
	elif [ $1 == "eps" ]; then
		figure=$eps
		cmd="postscript('$figure')"
	elif [ $1 == "emf" ]; then
		figure=$emf
		cmd="emf('$figure')"
	fi
	
#	hmm
}

function hmm() {
	config

cat >$script << EOF
require(devEMF)
library(quantmod)
library(RHmm)
library(parallel)
#$cmd

#getSymbols("${name}", src = "google")
getSymbols("${name}", start = '$startdate')
#getSymbols("${name}")
print(head(${name}))
chartSeries(${name}, theme="white")

#trainset <- window(${name}, start = as.Date("$startdate"), end = as.Date("$enddate"))
trainsetraw <- window(${name}, start = as.Date("$startdate"), end = as.Date("$enddate"))
print(ncol(trainsetraw)-1)
print(trainsetraw[,1:ncol(trainsetraw)-1])
trainset <- na.omit(trainsetraw[,1:ncol(trainsetraw)-1])
print(trainset)

#${name}_Subset <- window(${name}, start = as.Date("$startdate"), end = as.Date("$enddate"))
#${name}_Train <- cbind(${name}_Subset\$${name}.Close - ${name}_Subset\$${name}.Open, ${name}_Subset\$${name}.Volume)
train <- cbind(trainset\$${name}.Close - trainset\$${name}.Open)
#print(train)

testset <- window(${name}, start = as.Date("$teststart"), end = as.Date("$testend"))
test <- cbind(testset\$${name}.Close - testset\$${name}.Open)
print(testset)

# Baum-Welch Algorithm to find the model for the given observations
#hm_model <- HMMFit(obs = ${name}_Train, nStates = 5)
hm_model <- HMMFit(obs = train, nStates = 5, nMixt = 4, dis = "MIXTURE")
print(hm_model)

# Viterbi Algorithm to find the most probable state sequence
VitPath <- viterbi (hm_model, train)
print(VitPath)

# scatter plot
$cmd
${name}_Predict <- cbind(trainset\$${name}.Close, VitPath\$states)
#${name}_Predict <- cbind(${name}_Subset\$${name}.Close, VitPath\$states)
#print(${name}_Subset[,4] - ${name}_Predict [,1])

# predict next stock value m = nMixt, n = nStates
#sum(a$HMM$transMat[last(v$states),] * .colSums((matrix(unlist(a$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(a$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
# gaussian mixture HMM: nrow = nMixture, ncol = nStates
#print(hm_model\$HMM\$transMat[last(VitPath\$states),])
#print(hm_model\$HMM\$distribution\$mean[, seq(1, ncol(hm_model\$HMM\$distribution\$mean), by = 2)])
#print(unlist(hm_model\$HMM\$distribution\$mean))
#print(matrix(unlist(hm_model\$HMM\$distribution\$proportion[1,])))

# add a new colum "Pred"
testset <- cbind(testset, Pred = 0)
#testset <- cbind(testset\$${name}.Close, Pred = 0)
#print(testset)

#chartSeries(testset, theme="white")
#chartSeries(test, theme="white")

# number of rows of test set data
rows = nrow(testset)

MAPEsum = 0
NRMSEsum = 0
#MAPEsum <- 0

# predict and update HMM to include the new actual value
#for (i in 1: 251) {
#for (i in 1: 3) {
for (i in 1: rows) {
	#if (i == rows) break

	if(i != 0) {
		testrow <- testset[i, ]
		#print(testrow)
		todayopen <- testset\$${name}.Open[i, ]
		actual <- testset\$${name}.Close[i, ]
		#todayclose <- testset\$${name}.Close[i, ]
	}

	# predict the closing value of today
	change <- sum(hm_model\$HMM\$transMat[last(VitPath\$states),] * .colSums((matrix(unlist(hm_model\$HMM\$distribution\$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model\$HMM\$distribution\$proportion), nrow=4,ncol=5)), m=4,n=5))
	#sum(hm_model\$HMM\$transMat[last(VitPath\$states),] * .colSums((matrix(unlist(hm_model\$HMM\$distribution\$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model\$HMM\$distribution\$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
	print(change)

	pred <- todayopen + change
	#testrow\$Pred <- pred
	#print(pred)

	# update today's predicted value
	testset[i, ]\$Pred <- pred
	print(testset[i, ])

	# MAPE = sum(|pred - actual|/|actual|)*100/n
	diff = (abs ((pred - actual)/ actual))[1,]\$${name}.Open
	#print (diff)
	#MAPEsum <- MAPEsum + diff\$${name}.Open
	MAPEsum <- sum(MAPEsum, diff[1,1])
	#MAPEsum = MAPEsum + abs((pred - actual)/todayclose)
	#print(MAPEsum)
	#MAPE <- MAPEsum*100/rows
	#print(MAPE)

	# NRMSE = sqrt(sum((pred - actual)^2) / n)
	NRMSEsum <- sum(NRMSEsum, (pred - actual)^2) 

	# ROC

	# [Optional] Returns: sell or buy
	# if stock would increase sell, otherwise buy

	# single HMM
	#sum(hm_model\$HMM\$transMat[last(VitPath\$states),] * .colSums((matrix(unlist(hm_model\$HMM\$distribution\$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model\$HMM\$distribution\$proportion), nrow=1,ncol=5)), m=1,n=5))

	# update train data
	train <- rbind (train, todayclose - todayopen)
	
	# update HMM with the new data
	# Baum-Welch Algorithm to find the model for the given observations
	hm_model <- HMMFit(obs = train, nStates = 5, nMixt = 4, dis = "MIXTURE")

	# Viterbi Algorithm to find the most probable state sequence
	VitPath <- viterbi (hm_model, train)
}

print(paste0("[Stat] Rows = ", rows))
#print(rows)

MAPE <- MAPEsum*100/rows
print("[Stat] MAPE = ", MAPE)
#cat("[Stat] MAPE = ", MAPE)
#print(MAPE)

actuals <- testset\$${name}.Close
ymax = max (actuals)
ymin = min (actuals)
NRMSE <- sqrt(NRMSEsum)/(rows * (ymax - ymin))
print(paste0("[Stat] NRMSE = ", NRMSE))
#cat("NRMSE = ", NRMSE)
#print(NRMSE)

# plot actual with predicted values added
# compare actual closing value and predicted closing value
#chartSeries(testset[2:rows, 4], theme='white', col = 'green', name = "${name}", legend = "Actual",
chartSeries(testset[1:rows, 1], theme= chartTheme('white', up.col = 'blue'), name = "${name}", legend = "Actual",
	TA = "addTA(testset[1:rows, ncol(testset)], on = 1, col='red')") # 
#chartSeries(testset[2:rows, 1], theme='white.mono', name = 'Actual', TA = "addTA(testset[2:rows, 7], on = 1, col='yellow', legend = \"Predicted\")") # 
#chartSeries(testset[, 1], name = 'Actual', TA = "addTA(testset[, 7], on = 1, col='blue', legend = \"Predicted\")") # 
#chartSeries(testset)

# plot eps
postscript('$eps')
chartSeries(testset[1:rows, 1], theme= chartTheme('white', up.col = 'blue'), name = "${name}", legend = "Actual",
	TA = "addTA(testset[1:rows, ncol(testset)], on = 1, col='red')") # 
EOF

        R CMD BATCH $script
}

# simple moving average
function sma () {
	# sum	
	echo sma
	#pred=pred-first.Close/n + last.Close 
}

# exponential weighted moving average
function ewma () {
	echo emwa

	config
cat >$script << EOF
	require(devEMF)
	library(quantmod)
	library(RHmm)
	library(parallel)

	getSymbols("${name}", start = '$startdate')
	#getSymbols("${name}")
	print(head(${name}))
	ema = EMA( tail( Cl( ${name} ), 300 ), 200 )
	ema = cbind(tail(Cl(${name}), 300), ema)
	print(ema)
	#print( as.numeric( last( spyEMA ) ) )
EOF

        R CMD BATCH $script
}

function upload () {
	git add .
	git commit -a -m $script
	git push
}

for sym in ${symbols[@]}
do 
	echo $sym
	symbol=$sym

	#sma
	ewma 

	#hmm png
	#genplot png
	#genplot eps
	#genplot emf
#	upload
done

