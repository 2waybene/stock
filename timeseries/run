#!/bin/bash

if [ $# -lt 0 ]; then
	echo "usage: $0 data"	
	exit
fi

# Apple (NASDAQ:APPL), Google (NASDAQ:GOOG), Microsoft (NASDAQ:MSFT),
#Facebook (NASDAQ:FB), Twitter (NYSE:TWTR), LinkedIn
#(NYSE:LNKD), Amazon (NASDAQ:AMZN), Oracle (NYSE:ORCL), IBM (NYSE:IBM), Intel (NASDAQ:INT)
#symbols=( AAPL GOOG MSFT AMZN LNKD FB )
#symbols=( AAPL MSFT AMZN LNKD GOOG )
symbols=( FB )
#symbols=( GOOG FB )

#symbol=AAPL # since 1980-12-12
#symbol=GOOG # yahoo not working, google contains missing values NA
symbol=FB # since 2012-05-18
#symbol=MSFT # since 1986-3-13
#symbol=TWTR # too small data
#symbol=LNKD # since 2011-5-19
#symbol=AMZN # since 1997-5-16
#symbol=IBM # 

# training period
#startdate=2010-09-07
startdate=1900-01-01
#startdate=2000-01-01
enddate=2013-04-01

# test period
teststart=2013-04-02
testend=2014-04-01

xlabel="DATE"
#xlabel="DAY"
ylabel="STOCK PRICE ($)"
#ylabel="CLOSE VALUE"

function config() {
	name=$symbol
	out=$symbol # Gaussian mixture
	#out=$symbol-single 

	#name=$prefix
	script=${out}.R
	png=${out}.png
	emf=${out}.emf
	eps=${out}.eps

	src=yahoo
	symoptions=", from = '$startdate', to = '$testend', src = '$src'"
	if [ $symbol == "GOOG" ]; then # or $symbol == "TWTR" ]
		src=google
		symoptions=", src = '$src'"
		#symoptions("${name}", from = '$startdate', to = '$testend', src = '$src')
	fi

	cmd="png('$png')"
}

function hmm() {
	config

cat >$script << EOF
require(devEMF)
library(quantmod)
library(RHmm)
library(parallel)
#$cmd

getSymbols("${name}" $symoptions)
print(head(${name}))
print(tail(${name}))
chartSeries(${name}, theme="white")

#trainset <- window(${name}, start = as.Date("$startdate"), end = as.Date("$enddate"))
trainsetraw <- window(${name}, start = as.Date("$startdate"), end = as.Date("$enddate"))
print(ncol(trainsetraw)-1)
print(trainsetraw[,1:ncol(trainsetraw)-1])
trainset <- na.omit(trainsetraw[,1:ncol(trainsetraw)-1])
print(trainset)

#${name}_Subset <- window(${name}, start = as.Date("$startdate"), end = as.Date("$enddate"))
train <- cbind(trainset\$${name}.Close - trainset\$${name}.Open)
#print(train)

testset <- window(${name}, start = as.Date("$teststart"), end = as.Date("$testend"))
test <- cbind(testset\$${name}.Close - testset\$${name}.Open)
print(testset)

# Baum-Welch Algorithm to find the model for the given observations
# Gaussian mixture HMM: nStates = number of states, nMixt = number of Gaussian distributions 
hm_model <- HMMFit(obs = train, nStates = 5, nMixt = 4, dis = "MIXTURE")
print(hm_model)

# Viterbi Algorithm to find the most probable state sequence
VitPath <- viterbi (hm_model, train)
print(VitPath)

# scatter plot
$cmd
${name}_Predict <- cbind(trainset\$${name}.Close, VitPath\$states)

# add a new colum "Pred"
testset <- cbind(testset, Pred = 0)
#print(testset)

# number of rows of test set data
rows = nrow(testset)

MAPEsum = 0
NRMSEsum = 0

# predict and update HMM to include the new actual value
#for (i in 1: 251) {
#for (i in 1: 3) {
for (i in 1: rows) {
	if(i != 0) {
		testrow <- testset[i, ]
		#print(testrow)
		todayopen <- testset\$${name}.Open[i, ]
		actual <- testset\$${name}.Close[i, ]
		#todayclose <- testset\$${name}.Close[i, ]
	}

	# predict the closing value of today
	change <- sum(hm_model\$HMM\$transMat[last(VitPath\$states),] * .colSums((matrix(unlist(hm_model\$HMM\$distribution\$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model\$HMM\$distribution\$proportion), nrow=4,ncol=5)), m=4,n=5))
	print(change)

	pred <- todayopen + change
	#testrow\$Pred <- pred
	#print(pred)

	# update today's predicted value
	testset[i, ]\$Pred <- pred
	print(testset[i, ])

	# MAPE = sum(|pred - actual|/|actual|)*100/n
	diff = (abs ((pred - actual)/ actual))[1,]\$${name}.Open
	#print (diff)
	MAPEsum <- sum(MAPEsum, diff[1,1])
	#print(MAPEsum)

	# NRMSE = sqrt(sum((pred - actual)^2) / n)
	NRMSEsum <- sum(NRMSEsum, (pred - actual)^2) 

	# update train data
	train <- rbind (train, actual - todayopen)
	
	# update HMM with the new data
	# Baum-Welch Algorithm to find the model for the given observations
	hm_model <- HMMFit(obs = train, nStates = 5, nMixt = 4, dis = "MIXTURE")

	# Viterbi Algorithm to find the most probable state sequence
	VitPath <- viterbi (hm_model, train)
}

print(paste0("[Stat] Rows = ", rows))

print(MAPEsum)
MAPE <- MAPEsum*100/rows
sprintf("[Stat] MAPE = %.7f", MAPE)

actuals <- testset\$${name}.Close
ymax = max (actuals)
ymin = min (actuals)
NRMSE <- sqrt(NRMSEsum)/(rows * (ymax - ymin))
sprintf("[Stat] NRMSE = %.7f", NRMSE)

# plot actual with predicted values added
# compare actual closing value and predicted closing value
chartSeries(testset[1:rows, 1], theme= chartTheme('white', up.col = 'blue'), name = "${name}", legend = "Actual",
	TA = "addTA(testset[1:rows, ncol(testset)], on = 1, col='red')") # 

# plot eps
postscript('$eps')
chartSeries(testset[1:rows, 1], theme= chartTheme('white', up.col = 'blue'), name = "${name}", legend = "Actual",
	TA = "addTA(testset[1:rows, ncol(testset)], on = 1, col='red')") # 
EOF

        R CMD BATCH $script
}

# simple moving average
function sma () {
	# sum	
	echo sma
	#pred=pred-first.Close/n + last.Close 
}

# exponential weighted moving average
function ewma () {
	echo emwa
		
	config
	# number of past values
	npast=2

cat >$script << EOF
	require(devEMF)
	library(quantmod)

	#options('digits')
	#options(digits=7)

	getSymbols("${name}" $symoptions)
	#getSymbols("${name}", from = '$startdate', to = '$testend', src = '$src')
	#getSymbols("${name}", src = '$src')
	print(head(${name}))
	print(tail(${name}))

	actuals = Cl( ${name} )
	print(length(actuals))

	pred = EMA( actuals, $npast )
	#pred = EMA( actuals, length(actuals) - 253 )
	#print( as.numeric( last( spyEMA ) ) )

	#pred = ema[,1]
	rows = length(pred)
	#for (i in 2: rows) {
	for (i in 2: rows - 2) {
		pred[rows - i,] = pred[rows - i - 1,]	
	}
	ema = cbind(actuals, pred)
	ema = tail(ema, 253)
	print (ema)
	pred = ema[,1]
	actual = ema[,2]

	# MAPE = sum(|pred - actual|/|actual|)*100/n
	diff = abs ((pred - actual)/ actual)
	print (diff)
	MAPEsum = sum(diff)
	print(MAPEsum)
	rows = length(diff)
	print(paste0("[Stat] Rows = ", rows))
	MAPE <- MAPEsum*100/rows
	sprintf("[Stat] MAPE = %.7f", MAPE)

	# NRMSE = sqrt(sum((pred - actual)^2) / n)
	NRMSEsum <- sum((pred - actual)^2) 
	ymax = max (actual)
	ymin = min (actual)
	NRMSE <- sqrt(NRMSEsum)/(rows * (ymax - ymin))
	sprintf("[Stat] NRMSE = %.7f", NRMSE)
EOF

        R CMD BATCH $script
}

function upload () {
	git add .
	git commit -a -m $script
	git push
}

for sym in ${symbols[@]}
do 
	echo $sym
	symbol=$sym

	#sma
	#ewma 

	hmm 
#	upload
done

