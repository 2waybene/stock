
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> trainset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> train <- cbind(trainset$AAPL.Close - trainset$AAPL.Open)
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-01"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(trainset$AAPL.Close, VitPath$states)
> #AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1] 3.531383e-102  1.236293e-34  7.408116e-03  9.925919e-01  0.000000e+00
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
               mean       var       prop
mixt.  1 -1.7157166  9.154799 0.06253418
mixt.  2  0.6367261 15.641168 0.20491545
mixt.  3 -2.4689886  8.283564 0.30014440
mixt.  4  1.5628453  5.251954 0.43240597

  State 2
              mean         var       prop
mixt.  1  8.132739 0.005779492 0.09476729
mixt.  2  5.039837 0.734380500 0.19064914
mixt.  3 10.036119 0.872208016 0.21204005
mixt.  4 -3.935141 1.626779396 0.50254351

  State 3
               mean       var      prop
mixt.  1  -5.804202 1.6436323 0.1431054
mixt.  2  -3.550245 2.3529857 0.2620447
mixt.  3 -11.424932 0.1516448 0.2771290
mixt.  4  -7.785714 1.0350556 0.3177209

  State 4
               mean        var      prop
mixt.  1  1.1688404   3.862034 0.1450532
mixt.  2 -0.4176093 155.645358 0.2305202
mixt.  3 -5.9430172  29.123034 0.2805882
mixt.  4  2.8949471  32.540869 0.3438385

  State 5
               mean       var       prop
mixt.  1 -2.8938042 1.6723142 0.09393654
mixt.  2  1.2735433 3.2789040 0.09469567
mixt.  3 -0.4172222 0.9834346 0.40269992
mixt.  4  1.3533135 3.2554809 0.40866788

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -1.7157166  0.6367261 -2.4689886  1.5628453

[[2]]
[1]  8.132739  5.039837 10.036119 -3.935141

[[3]]
[1]  -5.804202  -3.550245 -11.424932  -7.785714

[[4]]
[1]  1.1688404 -0.4176093 -5.9430172  2.8949471

[[5]]
[1] -2.8938042  1.2735433 -0.4172222  1.3533135

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1]  -1.7157166   0.6367261  -2.4689886   1.5628453   8.1327392   5.0398367
 [7]  10.0361188  -3.9351414  -5.8042021  -3.5502446 -11.4249320  -7.7857140
[13]   1.1688404  -0.4176093  -5.9430172   2.8949471  -2.8938042   1.2735433
[19]  -0.4172222   1.3533135
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #testopen <- testset$AAPL.Open
> #for (i in 0: length(testopen)) {
> for (i in 0: 3) {
+ 	testopen <- testset$AAPL.Open[i, ]
+ 	testclose <- testset$AAPL.Close[i, ]
+ 	actual <- testset$AAPL.Open[i + 1, ]
+ 	#testrow <- testopen[i, ]
+ 	#print(testrow)
+ 	#print(testset$AAPL.Open[i, ])
+ 
+ # predict 
+ change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
+ print(change)
+ #print(tail(AAPL_Subset$AAPL.Close))
+ #head5 <- head(testset$AAPL.Close)
+ #print(head5)
+ pred <- predclose + change
+ #pred <- (tail(AAPL_Subset$AAPL.Close) + change)
+ print(pred)
+ 
+ #actual <- head(testset$AAPL.Close)
+ #actual <- head(testset$AAPL.Open)
+ print(actual)
+ 
+ # MAPE = sum(|pred - actual|/|actual|)*100/n
+ #MAPE <- pred$AAPL.Close - actual$AAPL.Close
+ #MAPE <- abs((pred$AAPL.Close - actual$AAPL.Close)/actual$AAPL.Close)
+ MAPE <- abs((pred$AAPL.Close - 420.05)/420.05) * 100
+ print(MAPE)
+ 
+ # single HMM
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
+ 
+ #chartSeries(testset, theme="white")
+ #chartSeries(test, theme="white")
+ 
+ # Forward-backward 
+ #fb <- forwardBackward(hm_model, test, FALSE)
+ #print(fb)
+ #print(AAPL_Subset[,4] - AAPL_Predict [,1])
+ 
+ #layout(matrix(1:2, nrow=2))
+ #layout(matrix(2:1, ncol=2))
+ #layout(1:2)
+ #print(matrix(2:1, ncol=2))
+ 
+ # show the states with predicted closing value
+ #chartSeries(pred)
+ chartSeries(pred, TA = "addTA(actual, on = 1)")
+ #chartSeries(pred, TA = "addTA(pred - change, on = 1)")
+ 
+ }
[1] -0.6492589
Error: object 'predclose' not found
Execution halted
