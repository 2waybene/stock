
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-02"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> #print(AAPL_Predict)
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1]  1.000000e+00  7.701652e-21  1.780392e-10  1.612756e-36 1.093383e-274
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
              mean       var       prop
mixt.  1 25.521792 13.435723 0.02234769
mixt.  2  1.566396  3.533609 0.15465767
mixt.  3 -6.652847 28.632664 0.22094611
mixt.  4  4.023455 41.193257 0.60204853

  State 2
                mean       var       prop
mixt.  1  4.71548458 11.477400 0.09300042
mixt.  2 -6.87401792  5.777448 0.10242629
mixt.  3  0.02509436 14.243107 0.27422411
mixt.  4  1.06206121  4.342315 0.53034918

  State 3
                mean       var       prop
mixt.  1 -13.7367901 80.990548 0.09981778
mixt.  2   0.5645803  5.671003 0.10480651
mixt.  3  -6.0297429 29.513110 0.28507180
mixt.  4  -0.4990099 45.914912 0.51030390

  State 4
              mean          var       prop
mixt.  1 -2.439084 2.8556670161 0.08629813
mixt.  2 -2.375642 0.0004886242 0.09218986
mixt.  3 -1.653301 3.3366146436 0.16837353
mixt.  4 -3.610655 1.3852664082 0.65313848

  State 5
               mean       var       prop
mixt.  1 -2.9673550 1.7697203 0.05385544
mixt.  2  1.5594051 3.4168060 0.25686468
mixt.  3 -0.4723210 0.6483065 0.26188248
mixt.  4  0.3580934 3.6005571 0.42739740

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] 25.521792  1.566396 -6.652847  4.023455

[[2]]
[1]  4.71548458 -6.87401792  0.02509436  1.06206121

[[3]]
[1] -13.7367901   0.5645803  -6.0297429  -0.4990099

[[4]]
[1] -2.439084 -2.375642 -1.653301 -3.610655

[[5]]
[1] -2.9673550  1.5594051 -0.4723210  0.3580934

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1]  25.52179169   1.56639607  -6.65284735   4.02345519   4.71548458
 [6]  -6.87401792   0.02509436   1.06206121 -13.73679005   0.56458031
[11]  -6.02974288  -0.49900988  -2.43908384  -2.37564212  -1.65330140
[16]  -3.61065459  -2.96735496   1.55940508  -0.47232096   0.35809336
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
> change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
> last[AAPL_Subset$AAPL.Close]
Error in last[AAPL_Subset$AAPL.Close] : 
  object of type 'closure' is not subsettable
Execution halted
