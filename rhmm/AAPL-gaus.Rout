
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> trainset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> train <- cbind(trainset$AAPL.Close - trainset$AAPL.Open)
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-01"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(trainset$AAPL.Close, VitPath$states)
> #AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1]  9.915582e-01  8.441829e-03  8.289499e-12 4.651991e-205  0.000000e+00
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
                mean        var       prop
mixt.  1 26.16274438  12.176610 0.01787184
mixt.  2  0.08991571   5.961221 0.20055764
mixt.  3 -7.39237132  15.396246 0.20696983
mixt.  4 -2.31790243 124.827826 0.57460069

  State 2
              mean         var       prop
mixt.  1  2.872294  0.03512405 0.07017809
mixt.  2 -3.300313 37.63534487 0.10357045
mixt.  3 -2.992153 37.99234911 0.30600595
mixt.  4  5.414214 21.18951048 0.52024551

  State 3
               mean      var       prop
mixt.  1 -1.0492689 16.51033 0.09533365
mixt.  2 -3.9707552 17.43865 0.12980594
mixt.  3 -0.7426715 20.12528 0.37489286
mixt.  4 -2.9131721 18.02250 0.39996755

  State 4
               mean       var       prop
mixt.  1 -2.9942954 13.529169 0.09090434
mixt.  2 -0.4745542  8.339735 0.21278145
mixt.  3 -1.5540392  9.263777 0.24969414
mixt.  4  1.5848247  6.278098 0.44662007

  State 5
               mean       var       prop
mixt.  1 -3.4153106 1.2464952 0.03408918
mixt.  2 -0.5006671 3.3347121 0.29398034
mixt.  3 -0.3724740 0.8036681 0.31032774
mixt.  4  1.7024298 2.8813372 0.36160274

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] 26.16274438  0.08991571 -7.39237132 -2.31790243

[[2]]
[1]  2.872294 -3.300313 -2.992153  5.414214

[[3]]
[1] -1.0492689 -3.9707552 -0.7426715 -2.9131721

[[4]]
[1] -2.9942954 -0.4745542 -1.5540392  1.5848247

[[5]]
[1] -3.4153106 -0.5006671 -0.3724740  1.7024298

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1] 26.16274438  0.08991571 -7.39237132 -2.31790243  2.87229367 -3.30031290
 [7] -2.99215261  5.41421413 -1.04926889 -3.97075525 -0.74267146 -2.91317210
[13] -2.99429539 -0.47455420 -1.55403919  1.58482474 -3.41531060 -0.50066713
[19] -0.37247401  1.70242982
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> testopen <- testset$AAPL.Open
> #for (i in 0: length(testopen) - 1) {
> for (i in 0: length(testopen)) {
+ 	testrow <- testopen[i, ]
+ #	print(testrow)
+ 	#print(testset$AAPL.Open[i, ])
+ }
> 
> # predict 
> change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
> print(change)
[1] -2.341332
> #print(tail(AAPL_Subset$AAPL.Close))
> head5 <- head(testset$AAPL.Close)
> print(head5)
           AAPL.Close
2013-03-01     430.47
2013-03-04     420.05
2013-03-05     431.14
2013-03-06     425.66
2013-03-07     430.58
2013-03-08     431.72
> pred <- head5 + change
> #pred <- (tail(AAPL_Subset$AAPL.Close) + change)
> print(pred)
           AAPL.Close
2013-03-01   428.1287
2013-03-04   417.7087
2013-03-05   428.7987
2013-03-06   423.3187
2013-03-07   428.2387
2013-03-08   429.3787
> 
> #actual <- head(testset$AAPL.Close)
> actual <- head(testset$AAPL.Open)
> print(actual)
           AAPL.Open
2013-03-01    438.00
2013-03-04    427.80
2013-03-05    421.48
2013-03-06    434.51
2013-03-07    424.50
2013-03-08    429.80
> 
> # MAPE = sum(|pred - actual|/|actual|)*100/n
> #MAPE <- pred$AAPL.Close - actual$AAPL.Close
> #MAPE <- abs((pred$AAPL.Close - actual$AAPL.Close)/actual$AAPL.Close)
> MAPE <- abs((pred$AAPL.Close - 420.05)/420.05) * 100
> print(MAPE)
           AAPL.Close
2013-03-01  1.9232635
2013-03-04  0.5573936
2013-03-05  2.0827683
2013-03-06  0.7781617
2013-03-07  1.9494508
2013-03-08  2.2208471
> 
> # single HMM
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
> 
> #chartSeries(testset, theme="white")
> #chartSeries(test, theme="white")
> 
> # Forward-backward 
> fb <- forwardBackward(hm_model, test, FALSE)
> #print(fb)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> #layout(matrix(1:2, nrow=2))
> #layout(matrix(2:1, ncol=2))
> layout(1:2)
> print(matrix(2:1, ncol=2))
     [,1] [,2]
[1,]    2    1
> 
> # show the states with predicted closing value
> #chartSeries(pred)
> chartSeries(pred, TA = "addTA(actual, on = 1)")
> #chartSeries(pred, TA = "addTA(pred - change, on = 1)")
> 
> #chartSeries(AAPL_Predict[,1], #theme="white.mono", 
> #chartSeries(AAPL_Predict[,1], layout = layout(matrix(2:1)), # 1, 2, byrow = TRUE), #respect = TRUE), #theme="white.mono", 
> #TA="addTA(AAPL_Predict[AAPL_Predict[,2]==1,1], legend = \"one day?\", on=1, col=5,pch=25);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type='p',col=6,pch=24);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type='p',col=7,pch=23);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type='p',col=8,pch=22);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type='p',col=10,pch=21)
> #")
> 
> 
> proc.time()
   user  system elapsed 
  3.953   0.048   4.264 
