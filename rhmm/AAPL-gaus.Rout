
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-02"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> #print(AAPL_Predict)
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1] 5.859263e-280 6.029468e-133  1.000000e+00 2.323770e-266  0.000000e+00
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
               mean       var       prop
mixt.  1 -3.8677924 14.803991 0.05003541
mixt.  2 -5.7673521  2.550176 0.09888670
mixt.  3  0.8277207  1.506709 0.35643150
mixt.  4  3.0033057  4.204225 0.49464640

  State 2
               mean      var       prop
mixt.  1  2.4153123 29.25986 0.06410035
mixt.  2  2.5139622 29.18830 0.23270359
mixt.  3 -5.2154173 13.96181 0.31048485
mixt.  4  0.4254248 25.14379 0.39271121

  State 3
               mean        var       prop
mixt.  1  0.9259325   1.973653 0.08716563
mixt.  2 -9.9699394  25.018950 0.11395282
mixt.  3 -0.1491250 154.327628 0.30762936
mixt.  4  0.4257535  33.781254 0.49125220

  State 4
              mean       var      prop
mixt.  1 -1.398390 4.2709910 0.1081186
mixt.  2 -2.756213 0.2313852 0.1516195
mixt.  3 -1.878844 3.9194398 0.1950422
mixt.  4 -1.754909 4.0413855 0.5452196

  State 5
                mean       var      prop
mixt.  1 -0.63948939 4.2450895 0.1907230
mixt.  2 -0.07092061 4.5330569 0.2015060
mixt.  3 -0.42027660 0.5276301 0.2071244
mixt.  4  1.17453076 3.5416284 0.4006467

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -3.8677924 -5.7673521  0.8277207  3.0033057

[[2]]
[1]  2.4153123  2.5139622 -5.2154173  0.4254248

[[3]]
[1]  0.9259325 -9.9699394 -0.1491250  0.4257535

[[4]]
[1] -1.398390 -2.756213 -1.878844 -1.754909

[[5]]
[1] -0.63948939 -0.07092061 -0.42027660  1.17453076

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1] -3.86779239 -5.76735205  0.82772070  3.00330572  2.41531227  2.51396223
 [7] -5.21541726  0.42542480  0.92593249 -9.96993935 -0.14912498  0.42575349
[13] -1.39839025 -2.75621288 -1.87884427 -1.75490876 -0.63948939 -0.07092061
[19] -0.42027660  1.17453076
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
> change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
> print(change)
[1] -0.8921161
> print(tail(AAPL_Subset$AAPL.Close))
           AAPL.Close
2013-02-22     450.81
2013-02-25     442.80
2013-02-26     448.97
2013-02-27     444.57
2013-02-28     441.40
2013-03-01     430.47
> pred <- (tail(AAPL_Subset$AAPL.Close) + change)
> print(pred)
           AAPL.Close
2013-02-22   449.9179
2013-02-25   441.9079
2013-02-26   448.0779
2013-02-27   443.6779
2013-02-28   440.5079
2013-03-01   429.5779
> actual <- (head(test$AAPL.Close)
+ # MAPE = sum(|pred - actual|/|actual|)*100/n
+ MAPE <- pred - actual
Error: unexpected symbol in:
"# MAPE = sum(|pred - actual|/|actual|)*100/n
MAPE"
Execution halted
