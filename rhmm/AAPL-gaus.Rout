
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> trainset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> train <- cbind(trainset$AAPL.Close - trainset$AAPL.Open)
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-01"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(trainset$AAPL.Close, VitPath$states)
> #AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1] 0.007386477 0.000000000 0.992613523 0.000000000 0.000000000
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
                mean        var       prop
mixt.  1 -11.3677571  0.1357704 0.01077233
mixt.  2  -8.1398691  0.3807903 0.02370570
mixt.  3   1.5008985 16.6257890 0.22931471
mixt.  4  -0.3717692 10.7407860 0.73620726

  State 2
               mean       var       prop
mixt.  1 -0.5635773 1.0040186 0.01755873
mixt.  2 -3.1219652 4.1087963 0.04477092
mixt.  3 -2.1977160 0.8587712 0.08042503
mixt.  4 -0.4077219 0.8340282 0.85724532

  State 3
              mean        var      prop
mixt.  1  1.439379   3.408396 0.1114507
mixt.  2 -7.335250  21.134601 0.1602680
mixt.  3 -0.704225 144.592911 0.2690579
mixt.  4  1.072830  38.520002 0.4592234

  State 4
             mean       var      prop
mixt.  1 2.123124 0.2798724 0.1604532
mixt.  2 1.458052 0.0658835 0.1945336
mixt.  3 2.976215 0.3217274 0.2753432
mixt.  4 1.142308 0.6117357 0.3696700

  State 5
               mean        var      prop
mixt.  1  0.3008323 0.02299304 0.1543705
mixt.  2 -2.5526963 0.04681587 0.1983184
mixt.  3 -4.2303482 0.62740646 0.2746955
mixt.  4  4.5704367 0.56482749 0.3726157

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -11.3677571  -8.1398691   1.5008985  -0.3717692

[[2]]
[1] -0.5635773 -3.1219652 -2.1977160 -0.4077219

[[3]]
[1]  1.439379 -7.335250 -0.704225  1.072830

[[4]]
[1] 2.123124 1.458052 2.976215 1.142308

[[5]]
[1]  0.3008323 -2.5526963 -4.2303482  4.5704367

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1] -11.3677571  -8.1398691   1.5008985  -0.3717692  -0.5635773  -3.1219652
 [7]  -2.1977160  -0.4077219   1.4393792  -7.3352502  -0.7042250   1.0728302
[13]   2.1231244   1.4580524   2.9762152   1.1423078   0.3008323  -2.5526963
[19]  -4.2303482   4.5704367
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> testopen <- testset$AAPL.Open
> for (i in 0: length(testset) - 1) {
+ 	testrow <- testopen[i, ]
+ #	print(testrow)
+ 	#print(testset$AAPL.Open[i, ])
+ }
Error in `[.xts`(testopen, i, ) : subscript out of bounds
Calls: [ -> [.xts
Execution halted
