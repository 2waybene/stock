
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> trainset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> train <- cbind(trainset$AAPL.Close - trainset$AAPL.Open)
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-01"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(trainset$AAPL.Close, VitPath$states)
> #AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1]  1.049877e-02  8.403542e-03  6.337231e-03  9.747605e-01 5.230771e-305
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
              mean      var       prop
mixt.  1 -6.724873 6.676086 0.06152922
mixt.  2 -5.235133 6.305070 0.11851344
mixt.  3  3.015936 9.681289 0.30703110
mixt.  4  1.218962 3.222891 0.51292625

  State 2
                 mean      var       prop
mixt.  1  21.39246353 33.74957 0.07235256
mixt.  2  -4.42945633 21.85243 0.27204707
mixt.  3 -11.16695520 79.96009 0.29734654
mixt.  4   0.04523562 50.13761 0.35825383

  State 3
              mean        var       prop
mixt.  1 -2.405236 0.02673856 0.07544046
mixt.  2 -1.726023 3.87098835 0.21295152
mixt.  3 -1.843356 3.91782059 0.33490482
mixt.  4 -3.403501 1.68598725 0.37670320

  State 4
              mean       var      prop
mixt.  1 -3.650187 13.927037 0.1217454
mixt.  2  7.734934 15.820512 0.2512551
mixt.  3 -7.065567 19.825635 0.2562667
mixt.  4  1.461332  5.882427 0.3707328

  State 5
               mean       var       prop
mixt.  1 -1.1084194 3.8443083 0.03210677
mixt.  2 -1.0987913 3.8524401 0.19011943
mixt.  3 -0.4355534 0.5818836 0.22472630
mixt.  4  1.0908201 3.5820291 0.55304750

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -6.724873 -5.235133  3.015936  1.218962

[[2]]
[1]  21.39246353  -4.42945633 -11.16695520   0.04523562

[[3]]
[1] -2.405236 -1.726023 -1.843356 -3.403501

[[4]]
[1] -3.650187  7.734934 -7.065567  1.461332

[[5]]
[1] -1.1084194 -1.0987913 -0.4355534  1.0908201

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1]  -6.72487306  -5.23513284   3.01593632   1.21896233  21.39246353
 [6]  -4.42945633 -11.16695520   0.04523562  -2.40523630  -1.72602329
[11]  -1.84335647  -3.40350150  -3.65018699   7.73493354  -7.06556744
[16]   1.46133205  -1.10841939  -1.09879126  -0.43555338   1.09082008
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #testopen <- testset$AAPL.Open
> #for (i in 0: length(testopen)) {
> for (i in 0: 3) {
+ 	testopen <- testset$AAPL.Open[i, ]
+ 	testclose <- testset$AAPL.Close[i, ]
+ 	actual <- testset$AAPL.Open[i + 1, ]
+ 	#testrow <- testopen[i, ]
+ 	#print(testrow)
+ 	#print(testset$AAPL.Open[i, ])
+ 
+ # predict 
+ change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
+ print(change)
+ #print(tail(AAPL_Subset$AAPL.Close))
+ #head5 <- head(testset$AAPL.Close)
+ #print(head5)
+ pred <- testclose + change
+ #pred <- (tail(AAPL_Subset$AAPL.Close) + change)
+ print(pred)
+ 
+ #actual <- head(testset$AAPL.Close)
+ #actual <- head(testset$AAPL.Open)
+ print(actual)
+ 
+ # MAPE = sum(|pred - actual|/|actual|)*100/n
+ #MAPE <- pred$AAPL.Close - actual$AAPL.Close
+ #MAPE <- abs((pred$AAPL.Close - actual$AAPL.Close)/actual$AAPL.Close)
+ #MAPE <- abs((pred$AAPL.Close - 420.05)/420.05) * 100
+ #print(MAPE)
+ 
+ # single HMM
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
+ 
+ #chartSeries(testset, theme="white")
+ #chartSeries(test, theme="white")
+ 
+ # Forward-backward 
+ #fb <- forwardBackward(hm_model, test, FALSE)
+ #print(fb)
+ #print(AAPL_Subset[,4] - AAPL_Predict [,1])
+ 
+ #layout(matrix(1:2, nrow=2))
+ #layout(matrix(2:1, ncol=2))
+ #layout(1:2)
+ #print(matrix(2:1, ncol=2))
+ 
+ # show the states with predicted closing value
+ chartSeries(pred)
+ #chartSeries(pred, TA = "addTA(actual, on = 1)")
+ #chartSeries(pred, TA = "addTA(pred - change, on = 1)")
+ 
+ }
[1] 0.1893581
     AAPL.Close
           AAPL.Open
2013-03-01       438
Error in `[.xts`(x, xsubset) : subscript out of bounds
Calls: chartSeries -> [ -> [.xts
Execution halted
