
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-02"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> #print(AAPL_Predict)
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1] 2.796172e-03 5.449584e-24 9.897439e-01 7.459944e-03 0.000000e+00
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
              mean      var       prop
mixt.  1 -2.190434 3.683289 0.02013477
mixt.  2 -1.963117 3.639560 0.21407677
mixt.  3 -3.900472 2.065413 0.28035849
mixt.  4  9.157481 1.613453 0.48542997

  State 2
               mean        var       prop
mixt.  1 -8.0793032  0.3095812 0.02576211
mixt.  2 -3.7400512  2.4422665 0.07423920
mixt.  3  1.5589008  1.7491819 0.08435086
mixt.  4  0.4199024 10.2988219 0.81564784

  State 3
                 mean        var       prop
mixt.  1  1.755336908   2.043762 0.08642973
mixt.  2 -0.009487511 161.515337 0.21551383
mixt.  3 -3.116719122  46.401851 0.24242194
mixt.  4 -0.615653408  52.557762 0.45563451

  State 4
               mean       var      prop
mixt.  1  -2.506972 3.7225948 0.1342514
mixt.  2 -11.391233 0.1308492 0.1384343
mixt.  3   4.434834 0.9484934 0.1544531
mixt.  4  -5.985380 5.8959717 0.5728612

  State 5
                mean       var      prop
mixt.  1 -0.55023738 4.4079621 0.1767014
mixt.  2 -0.38688718 0.5892703 0.2060241
mixt.  3  0.01970777 4.5703475 0.2977094
mixt.  4  1.27200077 3.5291829 0.3195651

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -2.190434 -1.963117 -3.900472  9.157481

[[2]]
[1] -8.0793032 -3.7400512  1.5589008  0.4199024

[[3]]
[1]  1.755336908 -0.009487511 -3.116719122 -0.615653408

[[4]]
[1]  -2.506972 -11.391233   4.434834  -5.985380

[[5]]
[1] -0.55023738 -0.38688718  0.01970777  1.27200077

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1]  -2.190434469  -1.963116742  -3.900471767   9.157480569  -8.079303215
 [6]  -3.740051164   1.558900775   0.419902430   1.755336908  -0.009487511
[11]  -3.116719122  -0.615653408  -2.506972482 -11.391233225   4.434833760
[16]  -5.985379585  -0.550237381  -0.386887181   0.019707771   1.272000775
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
Error in hm_model$HMM$distribution$mean[1, ] : 
  incorrect number of dimensions
Calls: print -> matrix -> unlist
Execution halted
