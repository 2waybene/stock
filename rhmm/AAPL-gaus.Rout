
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-02"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> #print(AAPL_Predict)
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1] 7.458677e-289  7.552556e-03 2.872177e-277  9.924474e-01 3.732304e-147
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
               mean       var       prop
mixt.  1 -1.2369299 1.8966160 0.01446371
mixt.  2 -4.1287067 7.1586271 0.01521347
mixt.  3 -0.3022360 0.6429842 0.47200793
mixt.  4 -0.6116224 2.0343435 0.49831489

  State 2
                mean        var      prop
mixt.  1 -2.81941407  0.3883352 0.0530585
mixt.  2 -2.39860257 14.3611955 0.1688871
mixt.  3  1.48056679  3.2617981 0.2491148
mixt.  4 -0.04894754 19.2725179 0.5289396

  State 3
             mean        var      prop
mixt.  1 1.567566 0.69078837 0.1072977
mixt.  2 1.428459 0.07542037 0.1685527
mixt.  3 1.902596 0.69501506 0.2002395
mixt.  4 3.024185 1.95478941 0.5239101

  State 4
               mean        var      prop
mixt.  1  1.3268227   3.824264 0.1242915
mixt.  2 -0.5690381 152.820576 0.2354286
mixt.  3 -6.5673355  24.690159 0.2578295
mixt.  4  2.4112120  34.035882 0.3824504

  State 5
              mean        var      prop
mixt.  1 -4.371351 0.49411217 0.1192417
mixt.  2 -4.406332 0.50251198 0.1988687
mixt.  3 -4.460234 0.50792245 0.2832091
mixt.  4 -2.533662 0.03023641 0.3986805

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -1.2369299 -4.1287067 -0.3022360 -0.6116224

[[2]]
[1] -2.81941407 -2.39860257  1.48056679 -0.04894754

[[3]]
[1] 1.567566 1.428459 1.902596 3.024185

[[4]]
[1]  1.3268227 -0.5690381 -6.5673355  2.4112120

[[5]]
[1] -4.371351 -4.406332 -4.460234 -2.533662

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1] -1.23692987 -4.12870670 -0.30223605 -0.61162242 -2.81941407 -2.39860257
 [7]  1.48056679 -0.04894754  1.56756606  1.42845917  1.90259564  3.02418475
[13]  1.32682271 -0.56903814 -6.56733554  2.41121197 -4.37135069 -4.40633184
[19] -4.46023406 -2.53366155
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
> change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
> print(change)
[1] -0.7361484
> print(tail(AAPL_Subset$AAPL.Close))
           AAPL.Close
2013-02-22     450.81
2013-02-25     442.80
2013-02-26     448.97
2013-02-27     444.57
2013-02-28     441.40
2013-03-01     430.47
> pred <- (tail(AAPL_Subset$AAPL.Close) + change)
> print(pred)
           AAPL.Close
2013-02-22   450.0739
2013-02-25   442.0639
2013-02-26   448.2339
2013-02-27   443.8339
2013-02-28   440.6639
2013-03-01   429.7339
> actual <- head(test$AAPL.Close)
> print(actual)
           AAPL.Close
2013-03-04      -7.75
2013-03-05       9.66
2013-03-06      -8.85
2013-03-07       6.08
2013-03-08       1.92
2013-03-11       8.12
> # MAPE = sum(|pred - actual|/|actual|)*100/n
> MAPE <- pred - actual
> print(MAPE)
Data:
numeric(0)

Index:
numeric(0)
> 
> # single HMM
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
> 
> chartSeries(testset, theme="white")
> #chartSeries(test, theme="white")
> 
> # Forward-backward 
> #fb <- forwardBackward(hm_model, test, FALSE)
> #print(fb)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> #layout(matrix(1:2, nrow=2))
> #layout(matrix(2:1, ncol=2))
> layout(1:2)
> print(matrix(2:1, ncol=2))
     [,1] [,2]
[1,]    2    1
> 
> # show the states with predicted closing value
> #chartSeries(AAPL_Predict[,1], #theme="white.mono", 
> #chartSeries(AAPL_Predict[,1], layout = layout(matrix(2:1)), # 1, 2, byrow = TRUE), #respect = TRUE), #theme="white.mono", 
> #TA="addTA(AAPL_Predict[AAPL_Predict[,2]==1,1], legend = \"one day?\", on=1, col=5,pch=25);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type='p',col=6,pch=24);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type='p',col=7,pch=23);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type='p',col=8,pch=22);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type='p',col=10,pch=21)
> #")
> 
> #addTA(AAPL_Predict[AAPL_Predict[,2]==1,1],on=1,type="p",col=5,pch=25)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type="p",col=6,pch=24)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type="p",col=7,pch=23)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type="p",col=8,pch=22)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type="p",col=10,pch=21)
> 
> 
> proc.time()
   user  system elapsed 
  4.598   0.071   4.886 
