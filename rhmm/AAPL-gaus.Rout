
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> trainset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> train <- cbind(trainset$AAPL.Close - trainset$AAPL.Open)
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-01"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(trainset$AAPL.Close, VitPath$states)
> #AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1] 1.840708e-09 9.928175e-01 7.182489e-03 0.000000e+00 0.000000e+00
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
               mean       var       prop
mixt.  1 -1.9267795 5.0930132 0.06338427
mixt.  2 -4.1812078 2.7763901 0.14628048
mixt.  3  0.1102741 0.4807071 0.22513885
mixt.  4 -2.6222632 1.7182422 0.56519640

  State 2
               mean        var      prop
mixt.  1  1.4258389   3.299279 0.1094332
mixt.  2 -0.3771372 160.641310 0.2133932
mixt.  3 -6.5427635  28.571843 0.2491563
mixt.  4  1.8627001  38.027670 0.4280173

  State 3
              mean       var      prop
mixt.  1 -7.060478  6.014514 0.1257488
mixt.  2 -1.410190 13.562795 0.1474909
mixt.  3  3.119276 13.443696 0.3146860
mixt.  4  1.936204  3.153243 0.4120743

  State 4
              mean        var       prop
mixt.  1 -7.775679 0.05115369 0.03036151
mixt.  2 -4.370306 0.66597431 0.22973709
mixt.  3  3.045387 0.43239374 0.35397018
mixt.  4  1.513122 0.05336838 0.38593123

  State 5
               mean       var      prop
mixt.  1  4.9341476 0.8685933 0.0264982
mixt.  2 -2.4193893 0.8785369 0.0872116
mixt.  3 -0.4287776 0.8037073 0.3952966
mixt.  4  0.9411036 2.8146173 0.4909936

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -1.9267795 -4.1812078  0.1102741 -2.6222632

[[2]]
[1]  1.4258389 -0.3771372 -6.5427635  1.8627001

[[3]]
[1] -7.060478 -1.410190  3.119276  1.936204

[[4]]
[1] -7.775679 -4.370306  3.045387  1.513122

[[5]]
[1]  4.9341476 -2.4193893 -0.4287776  0.9411036

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1] -1.9267795 -4.1812078  0.1102741 -2.6222632  1.4258389 -0.3771372
 [7] -6.5427635  1.8627001 -7.0604784 -1.4101896  3.1192755  1.9362045
[13] -7.7756794 -4.3703062  3.0453870  1.5131223  4.9341476 -2.4193893
[19] -0.4287776  0.9411036
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #testopen <- testset$AAPL.Open
> #for (i in 0: length(testopen)) {
> for (i in 0: 3) {
+ 	testopen <- testset$AAPL.Open[i, ]
+ 	testclose <- testset$AAPL.Close[i, ]
+ 	actual <- testset$AAPL.Open[i + 1, ]
+ 	#testrow <- testopen[i, ]
+ 	#print(testrow)
+ 	#print(testset$AAPL.Open[i, ])
+ 
+ # predict 
+ change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
+ print(change)
+ #print(tail(AAPL_Subset$AAPL.Close))
+ #head5 <- head(testset$AAPL.Close)
+ #print(head5)
+ pred <- testclose + change
+ #pred <- (tail(AAPL_Subset$AAPL.Close) + change)
+ print(pred)
+ 
+ #actual <- head(testset$AAPL.Close)
+ #actual <- head(testset$AAPL.Open)
+ print(actual)
+ 
+ # MAPE = sum(|pred - actual|/|actual|)*100/n
+ #MAPE <- pred$AAPL.Close - actual$AAPL.Close
+ #MAPE <- abs((pred$AAPL.Close - actual$AAPL.Close)/actual$AAPL.Close)
+ #MAPE <- abs((pred$AAPL.Close - 420.05)/420.05) * 100
+ #print(MAPE)
+ 
+ # single HMM
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
+ 
+ #chartSeries(testset, theme="white")
+ #chartSeries(test, theme="white")
+ 
+ # Forward-backward 
+ #fb <- forwardBackward(hm_model, test, FALSE)
+ #print(fb)
+ #print(AAPL_Subset[,4] - AAPL_Predict [,1])
+ 
+ #layout(matrix(1:2, nrow=2))
+ #layout(matrix(2:1, ncol=2))
+ #layout(1:2)
+ #print(matrix(2:1, ncol=2))
+ 
+ # show the states with predicted closing value
+ #chartSeries(pred)
+ #chartSeries(pred, TA = "addTA(actual, on = 1)")
+ #chartSeries(pred, TA = "addTA(pred - change, on = 1)")
+ 
+ }
[1] -0.746998
     AAPL.Close
           AAPL.Open
2013-03-01       438
[1] -0.746998
           AAPL.Close
2013-03-01    429.723
           AAPL.Open
2013-03-04     427.8
[1] -0.746998
           AAPL.Close
2013-03-04    419.303
           AAPL.Open
2013-03-05    421.48
[1] -0.746998
           AAPL.Close
2013-03-05    430.393
           AAPL.Open
2013-03-06    434.51
> 
> #chartSeries(AAPL_Predict[,1], #theme="white.mono", 
> #chartSeries(AAPL_Predict[,1], layout = layout(matrix(2:1)), # 1, 2, byrow = TRUE), #respect = TRUE), #theme="white.mono", 
> #TA="addTA(AAPL_Predict[AAPL_Predict[,2]==1,1], legend = \"one day?\", on=1, col=5,pch=25);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type='p',col=6,pch=24);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type='p',col=7,pch=23);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type='p',col=8,pch=22);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type='p',col=10,pch=21)
> #")
> 
> 
> proc.time()
   user  system elapsed 
  5.546   0.060   5.882 
