
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> trainset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> train <- cbind(trainset$AAPL.Close - trainset$AAPL.Open)
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-01"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(trainset$AAPL.Close, VitPath$states)
> #AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1]  5.677394e-22  9.659036e-01 4.501861e-149  3.409641e-02 4.517261e-198
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
               mean        var       prop
mixt.  1 -16.937704  0.2880275 0.02031272
mixt.  2   1.609191  2.3279731 0.15715027
mixt.  3  -1.739496 37.7168046 0.40664585
mixt.  4   4.724669 26.7760846 0.41589115

  State 2
               mean       var       prop
mixt.  1 11.5849916  2.956292 0.04548117
mixt.  2 -8.3413253  7.157461 0.14868077
mixt.  3 -0.8621608 17.965437 0.30417620
mixt.  4  0.3944441 20.863008 0.50166186

  State 3
              mean      var      prop
mixt.  1 20.754398 37.01249 0.0790688
mixt.  2 -4.286883 14.79824 0.1150221
mixt.  3 -9.653776 92.58620 0.3184359
mixt.  4 -2.087394 51.47647 0.4874732

  State 4
               mean       var      prop
mixt.  1 -2.3887796 12.595235 0.1477029
mixt.  2 -2.0840982  7.213675 0.1791132
mixt.  3  1.7159763  4.649023 0.2608360
mixt.  4  0.5847812  9.261672 0.4123480

  State 5
               mean       var       prop
mixt.  1 -3.8603947 1.0467611 0.02005836
mixt.  2 -1.1243611 2.7971328 0.08645004
mixt.  3 -0.4203342 0.5487713 0.20138050
mixt.  4  0.7119480 3.9291336 0.69211110

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] -16.937704   1.609191  -1.739496   4.724669

[[2]]
[1] 11.5849916 -8.3413253 -0.8621608  0.3944441

[[3]]
[1] 20.754398 -4.286883 -9.653776 -2.087394

[[4]]
[1] -2.3887796 -2.0840982  1.7159763  0.5847812

[[5]]
[1] -3.8603947 -1.1243611 -0.4203342  0.7119480

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1] -16.9377042   1.6091912  -1.7394957   4.7246690  11.5849916  -8.3413253
 [7]  -0.8621608   0.3944441  20.7543980  -4.2868829  -9.6537760  -2.0873936
[13]  -2.3887796  -2.0840982   1.7159763   0.5847812  -3.8603947  -1.1243611
[19]  -0.4203342   0.7119480
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> # predict 
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
> change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
> print(change)
[1] -0.7524265
> #print(tail(AAPL_Subset$AAPL.Close))
> head5 <- head(testset$AAPL.Close)
> print(head5)
           AAPL.Close
2013-03-01     430.47
2013-03-04     420.05
2013-03-05     431.14
2013-03-06     425.66
2013-03-07     430.58
2013-03-08     431.72
> pred <- head5 + change
> #pred <- (tail(AAPL_Subset$AAPL.Close) + change)
> print(pred)
           AAPL.Close
2013-03-01   429.7176
2013-03-04   419.2976
2013-03-05   430.3876
2013-03-06   424.9076
2013-03-07   429.8276
2013-03-08   430.9676
> 
> #actual <- head(testset$AAPL.Close)
> actual <- head(testset$AAPL.Open)
> print(actual)
           AAPL.Open
2013-03-01    438.00
2013-03-04    427.80
2013-03-05    421.48
2013-03-06    434.51
2013-03-07    424.50
2013-03-08    429.80
> 
> # MAPE = sum(|pred - actual|/|actual|)*100/n
> #MAPE <- pred$AAPL.Close - actual$AAPL.Close
> #MAPE <- abs((pred$AAPL.Close - actual$AAPL.Close)/actual$AAPL.Close)
> MAPE <- abs((pred$AAPL.Close - 420.05)/420.05) * 100
> print(MAPE)
           AAPL.Close
2013-03-01  2.3015292
2013-03-04  0.1791278
2013-03-05  2.4610341
2013-03-06  1.1564275
2013-03-07  2.3277166
2013-03-08  2.5991129
> 
> # single HMM
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
> 
> #chartSeries(testset, theme="white")
> #chartSeries(test, theme="white")
> 
> # Forward-backward 
> fb <- forwardBackward(hm_model, test, FALSE)
> #print(fb)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> #layout(matrix(1:2, nrow=2))
> #layout(matrix(2:1, ncol=2))
> layout(1:2)
> print(matrix(2:1, ncol=2))
     [,1] [,2]
[1,]    2    1
> 
> # show the states with predicted closing value
> #chartSeries(pred)
> chartSeries(pred, TA = "addTA(actual, on = 1)")
> #chartSeries(pred, TA = "addTA(pred - change, on = 1)")
> 
> #chartSeries(AAPL_Predict[,1], #theme="white.mono", 
> #chartSeries(AAPL_Predict[,1], layout = layout(matrix(2:1)), # 1, 2, byrow = TRUE), #respect = TRUE), #theme="white.mono", 
> #TA="addTA(AAPL_Predict[AAPL_Predict[,2]==1,1], legend = \"one day?\", on=1, col=5,pch=25);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type='p',col=6,pch=24);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type='p',col=7,pch=23);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type='p',col=8,pch=22);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type='p',col=10,pch=21)
> #")
> 
> 
> proc.time()
   user  system elapsed 
  4.771   0.051   5.003 
