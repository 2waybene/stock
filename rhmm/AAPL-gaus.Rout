
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> trainset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> train <- cbind(trainset$AAPL.Close - trainset$AAPL.Open)
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-01"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(trainset$AAPL.Close, VitPath$states)
> #AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1]  3.707672e-02  1.349226e-89  7.165621e-01  2.463612e-01 4.298024e-145
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
              mean          var       prop
mixt.  1  1.449628   0.05800511 0.04092327
mixt.  2 14.620857  87.43309734 0.11867212
mixt.  3 -4.148482  22.98115393 0.38685620
mixt.  4 -6.422797 107.95662457 0.45354841

  State 2
               mean          var       prop
mixt.  1  -7.518808 0.0008725121 0.07657026
mixt.  2 -15.482843 1.8354195352 0.10734268
mixt.  3 -11.481850 0.1948579085 0.28569971
mixt.  4  -8.445834 0.4449579973 0.53038735

  State 3
              mean       var      prop
mixt.  1 -5.574309  1.044166 0.1011131
mixt.  2  2.454430  1.852482 0.2110508
mixt.  3  6.703200 16.318313 0.3207145
mixt.  4 -1.895616  4.539572 0.3671216

  State 4
               mean      var      prop
mixt.  1 -3.9985788 3.825315 0.1186956
mixt.  2 -0.7415375 7.344908 0.2226316
mixt.  3 -0.1599424 7.343038 0.2355877
mixt.  4  1.7594258 6.098246 0.4230851

  State 5
               mean       var       prop
mixt.  1 -3.0628523 1.5631216 0.06705251
mixt.  2 -0.4890393 2.8568462 0.07653254
mixt.  3 -0.4378421 0.7470609 0.28922899
mixt.  4  1.0603890 3.5801070 0.56718595

> print(hm_model$HMM$distribution$mean)
[[1]]
[1]  1.449628 14.620857 -4.148482 -6.422797

[[2]]
[1]  -7.518808 -15.482843 -11.481850  -8.445834

[[3]]
[1] -5.574309  2.454430  6.703200 -1.895616

[[4]]
[1] -3.9985788 -0.7415375 -0.1599424  1.7594258

[[5]]
[1] -3.0628523 -0.4890393 -0.4378421  1.0603890

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1]   1.4496284  14.6208574  -4.1484817  -6.4227968  -7.5188083 -15.4828430
 [7] -11.4818499  -8.4458339  -5.5743095   2.4544299   6.7031998  -1.8956159
[13]  -3.9985788  -0.7415375  -0.1599424   1.7594258  -3.0628523  -0.4890393
[19]  -0.4378421   1.0603890
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #testopen <- testset$AAPL.Open
> #for (i in 0: length(testopen)) {
> for (i in 0: 3) {
+ 	testopen <- testset$AAPL.Open[i, ]
+ 	testclose <- testset$AAPL.Close[i, ]
+ 	actual <- testset$AAPL.Open[i + 1, ]
+ 	#testrow <- testopen[i, ]
+ 	#print(testrow)
+ 	#print(testset$AAPL.Open[i, ])
+ 
+ # predict 
+ change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
+ print(change)
+ #print(tail(AAPL_Subset$AAPL.Close))
+ #head5 <- head(testset$AAPL.Close)
+ #print(head5)
+ pred <- testclose + change
+ #pred <- (tail(AAPL_Subset$AAPL.Close) + change)
+ print(pred)
+ 
+ #actual <- head(testset$AAPL.Close)
+ #actual <- head(testset$AAPL.Open)
+ print(actual)
+ 
+ # MAPE = sum(|pred - actual|/|actual|)*100/n
+ #MAPE <- pred$AAPL.Close - actual$AAPL.Close
+ #MAPE <- abs((pred$AAPL.Close - actual$AAPL.Close)/actual$AAPL.Close)
+ #MAPE <- abs((pred$AAPL.Close - 420.05)/420.05) * 100
+ #print(MAPE)
+ 
+ # single HMM
+ #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
+ 
+ #chartSeries(testset, theme="white")
+ #chartSeries(test, theme="white")
+ 
+ # Forward-backward 
+ #fb <- forwardBackward(hm_model, test, FALSE)
+ #print(fb)
+ #print(AAPL_Subset[,4] - AAPL_Predict [,1])
+ 
+ #layout(matrix(1:2, nrow=2))
+ #layout(matrix(2:1, ncol=2))
+ #layout(1:2)
+ #print(matrix(2:1, ncol=2))
+ 
+ # show the states with predicted closing value
+ #chartSeries(pred)
+ #chartSeries(pred, TA = "addTA(actual, on = 1)")
+ #chartSeries(pred, TA = "addTA(pred - change, on = 1)")
+ 
+ }
[1] 0.9246381
     AAPL.Close
           AAPL.Open
2013-03-01       438
[1] 0.9246381
           AAPL.Close
2013-03-01   431.3946
           AAPL.Open
2013-03-04     427.8
[1] 0.9246381
           AAPL.Close
2013-03-04   420.9746
           AAPL.Open
2013-03-05    421.48
[1] 0.9246381
           AAPL.Close
2013-03-05   432.0646
           AAPL.Open
2013-03-06    434.51
> 
> chartSeries(testset)
> 
> #chartSeries(AAPL_Predict[,1], #theme="white.mono", 
> #chartSeries(AAPL_Predict[,1], layout = layout(matrix(2:1)), # 1, 2, byrow = TRUE), #respect = TRUE), #theme="white.mono", 
> #TA="addTA(AAPL_Predict[AAPL_Predict[,2]==1,1], legend = \"one day?\", on=1, col=5,pch=25);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type='p',col=6,pch=24);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type='p',col=7,pch=23);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type='p',col=8,pch=22);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type='p',col=10,pch=21)
> #")
> 
> 
> proc.time()
   user  system elapsed 
  4.617   0.066   4.857 
