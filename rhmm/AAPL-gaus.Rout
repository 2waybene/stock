
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(quantmod)
Loading required package: Defaults
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: TTR
Version 0.4-0 included new data defaults. See ?getSymbols.
> 
> require(devEMF)
Loading required package: devEMF
> #postscript('AAPL-gaus.eps')
> 
> getSymbols("AAPL")
    As of 0.4-0, ‘getSymbols’ uses env=parent.frame() and
 auto.assign=TRUE by default.

 This  behavior  will be  phased out in 0.5-0  when the call  will
 default to use auto.assign=FALSE. getOption("getSymbols.env") and 
 getOptions("getSymbols.auto.assign") are now checked for alternate defaults

 This message is shown once per session and may be disabled by setting 
 options("getSymbols.warning4.0"=FALSE). See ?getSymbol for more details
[1] "AAPL"
> chartSeries(AAPL, theme="white")
> AAPL_Subset <- window(AAPL, start = as.Date("2000-01-01"), end = as.Date("2013-03-01"))
> #AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open, AAPL_Subset$AAPL.Volume)
> AAPL_Train <- cbind(AAPL_Subset$AAPL.Close - AAPL_Subset$AAPL.Open)
> #print(AAPL_Train)
> 
> testset <- window(AAPL, start = as.Date("2013-03-02"), end = as.Date("2014-03-01"))
> test <- cbind(testset$AAPL.Close - testset$AAPL.Open)
> 
> library(RHmm)
Loading required package: MASS
Loading required package: nlme
> # Baum-Welch Algorithm to find the model for the given observations
> #hm_model <- HMMFit(obs = AAPL_Train, nStates = 5)
> hm_model <- HMMFit(obs = AAPL_Train, nStates = 5, nMixt = 4, dis = "MIXTURE")
> 
> # Viterbi Algorithm to find the most probable state sequence
> VitPath <- viterbi (hm_model, AAPL_Train)
> 
> # scatter plot
> postscript('AAPL-gaus.eps')
> AAPL_Predict <- cbind(AAPL_Subset$AAPL.Close, VitPath$states)
> #print(AAPL_Subset)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> #print(AAPL_Predict)
> 
> # predict next stock value m = nMixt, n = nStates
> #sum(a[last(v),] * .colSums((matrix(unlist(a), nrow=4,ncol=5)) * (matrix(unlist(a), nrow=4,ncol=5)), m=4,n=5))
> # gaussian mixture HMM: nrow = nMixture, ncol = nStates
> print(hm_model$HMM$transMat[last(VitPath$states),])
[1]  0.000000e+00  1.547490e-02  9.845251e-01  5.381296e-10 1.893254e-283
> print(hm_model$HMM$distribution)

Model:
5 states HMM with mixture of 4 1-d gaussian distributions

Distribution parameters:
  State 1
               mean        var        prop
mixt.  1 1.21659095 1.14723083 0.001463345
mixt.  2 1.47249862 0.05940067 0.104225828
mixt.  3 1.69573895 1.03374892 0.349411496
mixt.  4 0.04897893 0.34123354 0.544899331

  State 2
                 mean       var       prop
mixt.  1 -0.007549422 11.203663 0.02246624
mixt.  2  1.884831202  2.928767 0.19990411
mixt.  3 -1.626191862  6.268966 0.22035940
mixt.  4 -0.504508900 19.754293 0.55727025

  State 3
              mean       var       prop
mixt.  1 24.889840 15.453737 0.02569394
mixt.  2  1.672290  4.111559 0.20156041
mixt.  3  6.957987 25.814267 0.37983423
mixt.  4 -4.658767 32.111603 0.39291142

  State 4
                mean      var      prop
mixt.  1 -11.1979993 83.60997 0.1611609
mixt.  2   3.9921644 31.15290 0.2104510
mixt.  3  -8.3775042 14.63427 0.2442730
mixt.  4  -0.5744568 12.34716 0.3841150

  State 5
               mean       var      prop
mixt.  1 -0.7134304 3.1177451 0.1063289
mixt.  2 -1.9201922 2.6809030 0.2742799
mixt.  3 -0.9814346 0.5053797 0.3079295
mixt.  4  2.5165928 2.6139775 0.3114617

> print(hm_model$HMM$distribution$mean)
[[1]]
[1] 1.21659095 1.47249862 1.69573895 0.04897893

[[2]]
[1] -0.007549422  1.884831202 -1.626191862 -0.504508900

[[3]]
[1] 24.889840  1.672290  6.957987 -4.658767

[[4]]
[1] -11.1979993   3.9921644  -8.3775042  -0.5744568

[[5]]
[1] -0.7134304 -1.9201922 -0.9814346  2.5165928

> #print(hm_model$HMM$distribution$mean[, seq(1, ncol(hm_model$HMM$distribution$mean), by = 2)])
> print(unlist(hm_model$HMM$distribution$mean))
 [1]   1.216590950   1.472498622   1.695738952   0.048978932  -0.007549422
 [6]   1.884831202  -1.626191862  -0.504508900  24.889839617   1.672289557
[11]   6.957987117  -4.658767326 -11.197999332   3.992164430  -8.377504193
[16]  -0.574456774  -0.713430442  -1.920192227  -0.981434619   2.516592759
> #print(unlist(hm_model$HMM$distribution$mean[1,]))
> #print(matrix(unlist(hm_model$HMM$distribution$mean[1,])))
> #print(matrix(unlist(hm_model$HMM$distribution$proportion[1,])))
> 
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean[1,]), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion[1,]), nrow=4,ncol=5)), m=4,n=5))
> change <- sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=4,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=4,ncol=5)), m=4,n=5))
> print(change)
[1] 1.757232
> print(tail(AAPL_Subset$AAPL.Close))
           AAPL.Close
2013-02-22     450.81
2013-02-25     442.80
2013-02-26     448.97
2013-02-27     444.57
2013-02-28     441.40
2013-03-01     430.47
> pred <- (tail(AAPL_Subset$AAPL.Close) + change)
> print(pred)
           AAPL.Close
2013-02-22   452.5672
2013-02-25   444.5572
2013-02-26   450.7272
2013-02-27   446.3272
2013-02-28   443.1572
2013-03-01   432.2272
> actual <- head(testset$AAPL.Close)
> print(actual)
           AAPL.Close
2013-03-04     420.05
2013-03-05     431.14
2013-03-06     425.66
2013-03-07     430.58
2013-03-08     431.72
2013-03-11     437.87
> # MAPE = sum(|pred - actual|/|actual|)*100/n
> #MAPE <- pred$AAPL.Close - actual$AAPL.Close
> #MAPE <- abs((pred$AAPL.Close - actual$AAPL.Close)/actual$AAPL.Close)
> MAPE <- abs((pred$AAPL.Close - 420.05)/420.05) * 100
> print(MAPE)
           AAPL.Close
2013-02-22   7.741276
2013-02-25   5.834361
2013-02-26   7.303233
2013-02-27   6.255739
2013-02-28   5.501067
2013-03-01   2.898996
> 
> # single HMM
> #sum(hm_model$HMM$transMat[last(VitPath$states),] * .colSums((matrix(unlist(hm_model$HMM$distribution$mean), nrow=1,ncol=5)) * (matrix(unlist(hm_model$HMM$distribution$proportion), nrow=1,ncol=5)), m=1,n=5))
> 
> #chartSeries(testset, theme="white")
> #chartSeries(test, theme="white")
> 
> # Forward-backward 
> fb <- forwardBackward(hm_model, test, FALSE)
> #print(fb)
> #print(AAPL_Subset[,4] - AAPL_Predict [,1])
> 
> #layout(matrix(1:2, nrow=2))
> #layout(matrix(2:1, ncol=2))
> layout(1:2)
> print(matrix(2:1, ncol=2))
     [,1] [,2]
[1,]    2    1
> 
> # show the states with predicted closing value
> #chartSeries(AAPL_Predict[,1], #theme="white.mono", 
> #chartSeries(AAPL_Predict[,1], layout = layout(matrix(2:1)), # 1, 2, byrow = TRUE), #respect = TRUE), #theme="white.mono", 
> #TA="addTA(AAPL_Predict[AAPL_Predict[,2]==1,1], legend = \"one day?\", on=1, col=5,pch=25);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type='p',col=6,pch=24);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type='p',col=7,pch=23);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type='p',col=8,pch=22);
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type='p',col=10,pch=21)
> #")
> 
> #addTA(AAPL_Predict[AAPL_Predict[,2]==1,1],on=1,type="p",col=5,pch=25)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==2,1],on=1,type="p",col=6,pch=24)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==3,1],on=1,type="p",col=7,pch=23)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==4,1],on=1,type="p",col=8,pch=22)
> #addTA(AAPL_Predict[AAPL_Predict[,2]==5,1],on=1,type="p",col=10,pch=21)
> 
> 
> proc.time()
   user  system elapsed 
  5.400   0.057   5.686 
